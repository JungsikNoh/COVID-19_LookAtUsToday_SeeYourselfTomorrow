# coin tossing as the number of trials increases
seqPropHeads <- numeric()
for (n in 1:500){
x <- sample(x=c(0,1), size=n, replace=TRUE)
seqPropHeads[n] = mean(x)
}
# visualize the sample averages
plot(seqPropHeads, type='l', ylim=c(0,1))
abline(h=0.5, col='red')
n <- 5
for (n in 1:500){
x <- sample(x=c(0,1), size=n, replace=TRUE)
seqPropHeads[n] = mean(x)
}
plot(density(seqPropHeads))
tmp = data.frame(seqPropHeads)
View(tmp)
View(tmp)
# coin tossing as the number of trials increases
seqPropHeads <- numeric()
n <- 5
for (n in 1:500){
x <- sample(x=c(0,1), size=n, replace=TRUE)
seqPropHeads[n] = mean(x)
}
plot(density(seqPropHeads)
)
hist(seqPropHeads)
hist(seqPropHeads, 'fd')
seqPropHeads <- numeric()
sampleSize <- 5
for (n in 1:500){
x <- sample(x=c(0,1), size=sampleSize, replace=TRUE)
seqPropHeads[n] = mean(x)
}
# visualize the sample averages
plot(density(seqPropHeads))
hist(seqPropHeads)
tail(seqPropHeads)
# tossing a fair coin
x <- sample(x=c(0,1), size=10, replace=TRUE)
x
# sample average of the discrete binary observations
propHeads <- mean(x)
propHeads
# tossing a fair coin
x <- sample(x=c(0,1), size=10, replace=TRUE)
x
# sample average of the discrete binary observations
propHeads <- mean(x)
propHeads
# coin tossing as the number of trials increases
seqPropHeads <- numeric()
for (n in 1:50){
x <- sample(x=c(0,1), size=n, replace=TRUE)
seqPropHeads[n] = mean(x)
}
# visualize the sample averages
plot(seqPropHeads, type='l', ylim=c(0,1))
abline(h=0.5, col='red')
seqPropHeads5 <- numeric()
for (n in 1:50){
x <- sample(x=c(0,1), size=5, replace=TRUE)
seqPropHeads5[n] = mean(x)
}
seqPropHeads20 <- numeric()
for (n in 1:50){
x <- sample(x=c(0,1), size=20, replace=TRUE)
seqPropHeads20[n] = mean(x)
}
seqPropHeads80 <- numeric()
for (n in 1:50){
x <- sample(x=c(0,1), size=80, replace=TRUE)
seqPropHeads80[n] = mean(x)
}
mymat <- c(seqPropseqPropHeads5, seqPropseqPropHeads20, seqPropseqPropHeads80)
mymat <- c(seqPropHeads5, seqPropHeads20, seqPropHeads80)
mymat
mymat <- c(seqPropHeads5; seqPropHeads20; seqPropHeads80)
mymat <- rbind(seqPropHeads5, seqPropHeads20, seqPropHeads80)
mymat
?boxplot
mymat <- matrix(0, 50, 3)
mymat <- matrix(0, 50, 3)
for (n in 1:50){
x <- sample(x=c(0,1), size=5, replace=TRUE)
mymat[n,1] = mean(x)
}
seqPropHeads20 <- numeric()
for (n in 1:50){
x <- sample(x=c(0,1), size=20, replace=TRUE)
mymat[n,2] = mean(x)
}
seqPropHeads80 <- numeric()
for (n in 1:50){
x <- sample(x=c(0,1), size=80, replace=TRUE)
mymat[n,3] = mean(x)
}
mymat
boxplot(mymat)
summary(mymat)
sd(mymat)
apply(mymat, sd)
apply(mymat, 1, sd)
apply(mymat, 2, sd)
# tossing a fair coin
x <- sample(x=c(0,1), size=10, replace=TRUE)
x
# sample average of the discrete binary observations
propHeads <- mean(x)
propHeads
# tossing a fair coin
x <- sample(x=c(0,1), size=10, replace=TRUE)
x
# sample average of the discrete binary observations
propHeads <- mean(x)
propHeads
# coin tossing as the number of trials increases
seqPropHeads <- numeric()
for (n in 1:50){
x <- sample(x=c(0,1), size=n, replace=TRUE)
seqPropHeads[n] = mean(x)
}
# visualize the sample averages
plot(seqPropHeads, type='l', ylim=c(0,1))
abline(h=0.5, col='red')
for (n in 1:100){
x <- sample(x=c(0,1), size=n, replace=TRUE)
seqPropHeads[n] = mean(x)
}
# visualize the sample averages
plot(seqPropHeads, type='l', ylim=c(0,1))
abline(h=0.5, col='red')
# visualize the sample averages
plot(seqPropHeads, type='l', ylim=c(0,1))
abline(h=0.5, col='red')
xlab("Sample Size")
# visualize the sample averages
plot(seqPropHeads, type='l', ylim=c(0,1), xlab='SampleSize')
# visualize the sample averages
plot(seqPropHeads, type='l', ylim=c(0,1), xlab='SampleSize')
abline(h=0.5, col='red')
# coin tossing as the number of trials increases
seqPropHeads <- numeric()
for (n in 1:1000){
x <- sample(x=c(0,1), size=n, replace=TRUE)
seqPropHeads[n] = mean(x)
}
# visualize the sample averages
plot(seqPropHeads, type='l', ylim=c(0,1), xlab='SampleSize')
abline(h=0.5, col='red')
getwd()
data(cars)
cars
cars$speed[2] <- 100
head(cars)
data(cars)
haed(cars)
head(cars)
View(cars)
View(cars)
help(cars)
?cars
1 + 2
2*3
0/2
0/2
2/0
0/0
3^2
sqrt(2)
abs(-2)
round(2.6)
floor(2.6)
sin(1)
sin(pi/2)
pi
1 + 2
2*3
0/2
2/0
0/0
3^2
sqrt(2)
abs(-2)
round(2.6)
floor(2.6)
sin(1)
sin(pi/2)
pi
x <- 2
x
x = 2
x^2
sqrt(x)
a <- 1
a <- a+1
a
a = a + 1
a
summary
summary <- 2
summary
v <- 1:6
v
matrix(data=v, nrow=2, ncol=3)
help("matrix")
?matrix
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
mdat <- matrix(c(1,2,3, 11,12,13),  2,  3,  TRUE,
list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
mdat <- matrix(c(1,2,3, 11,12,13),  2,  3)
mdat
matrix(v, 2, 3)
matrix(0, 2, 3)
matrix(0, 3)
matrix(v, 3)
matrix(v, , 2)
matrix(v, , 3)
matrix(v, [], 3)
M <- matrix(v, 2, 3)
M
A <- matrix(1:9, 3)
A
A[2,3]
A[2,]
data(cars)
spd = cars$speed
hist(spd)
hist(spd, 'fd')
hist(spd, 'fd')
rnorm(100)
x <- rnorm(100)
hist(x)
hist(x, 'fd')
hist(x)
hist(x, 'fd')
hist(x, 'FD')
hist(x, 'Scoott')
hist(x, 'Scott')
hist(x, nclass=30)
summary(cars)
mean(cars)
sd(cars)
mean(cars)
cars
M
mean(M)
sd(M)
plot(cars)
v <- 1:6
v
matrix(data=v, nrow=2, ncol=3)
help("matrix")
?matrix
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
matrix(v, 2, 3)
matrix(v, 3, 2)
matrix(0, 2, 3)
matrix(v, 3)
matrix(v, , 2)
matrix(v, 3, byrow=TRUE)
M <- matrix(v, 2, 3)
M
M + 2
M * M
t(M)
M %*% t(M)
dim(M)
length(M)
head(M)
tail(M)
A <- matrix(1:9, 3)
A
v
v[3]
A[2, 3]
A[1:3, 3]
A[, 3]
A[2:3, 2:3]
ind <- c(2:3)
A[ind, 2]
M
A
myList <- list(mat1 = M, mat2 = t(M), mat3 = A)
myList
myList$mat3[2,3]
myList[[3]]
myList$mat3
myList2 <- c(myList, myList)
myList
myList2
mydata <- list(tvolume = 1:10, tweight = 2:11)
mydata
mydata <- data.frame(tvolume = 1:10, tweight = 2:11)
mydata
data(A)
data(cars)
cars
View(cars)
View(cars)
cars
head(cars)
tail(cars)
plot(cars$speed, cars$dist)
plot(cars)
summary(cars$speed)
summary(cars)
hist(cars$speed)
mean(cars$speed)
sd(cars$speed)
var(cars$speed)
quantile(cars$speed)
boxplot(cars)
boxplot(cars$speed)
boxplot(cars)
rnorm(n=30, mean=0, sd=1)
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
# an example of t-test
tumorSizeWT <- rnorm(n=30, mean=7, sd=1)
tumorSizeMT <- rnorm(n=40, mean=6, sd=1)
tumorSizeWT
tumorSizeMT
summary(tumorSizeMT)
summary(tumorSizeWT)
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
# data visualization using density()
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
plot(density(tumorSizeMT), col='red', xlim=c(2,11), ylim=c(0, 0.6))
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
lines(density(tumorSizeMT), col='red', xlim=c(2,11), ylim=c(0, 0.6))
# data visualization using boxplot
tumorSize <- c(tumorSizeWT, tumorSizeMT)
c(rep("WT", 30), rep("MT", 40))
tumorSize
cond
# data visualization using boxplot
tumorSize <- c(tumorSizeWT, tumorSizeMT)
cond <- c(rep("WT", 30), rep("MT", 40))
boxplot(tumorSize ~ cond)
# Student's t-test
t.test(x=tumorSizeWT, y=tumorSizeMT)
# Student's t-test
t.test(x=tumorSizeWT, y=tumorSizeMT)
# an example of t-test
tumorSizeWT <- rnorm(n=30, mean=7, sd=1)
tumorSizeMT <- rnorm(n=40, mean=6, sd=1)
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
lines(density(tumorSizeMT), col='red', xlim=c(2,11), ylim=c(0, 0.6))
# data visualization using boxplot
tumorSize <- c(tumorSizeWT, tumorSizeMT)
cond <- c(rep("WT", 30), rep("MT", 40))
boxplot(tumorSize ~ cond)
# Student's t-test
t.test(x=tumorSizeWT, y=tumorSizeMT)
#setwd('C:/forgithub/COVID19_LookAtUsTodaySeeYourselfTomorrow')
print(getwd())
#curDate = Sys.Date(); print(curDate)
curDate = '2020-04-14'
setwd('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow')
getwd()
## COVID-19: Look at us today, see yourself tomorrow
## Look at us today, see yourself tomorrow - NY Governor Andrew Cuomo
## Jungsik Noh, UTSW, Dallas, TX
##
# Updates:
## source functions
t1 = Sys.time()
#curDate = Sys.Date(); print(curDate)
curDate = '2020-04-14'
#setwd('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow')
getwd()
source(file.path(getwd(), 'cvd_state_matchedProjected.R'))
source(file.path(getwd(), 'cvd_country_matchedProjected.R'))
source(file.path(getwd(), 'cvd_county_matchedProjected.R'))
library(ggplot2)
library(data.table)
library(formattable)
library(ggpubr)
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
write.csv(jhudat, file.path(getwd(), 'JHU_CSSE_covid19_confirmed_global.csv'))
### fetch states data from covidtracking.com
#url2 = 'https://covidtracking.com/api/v1/states/daily.csv'
#covidtrackingDat = read.csv(url2, head=T)
## daily input dataset
#write.csv(covidtrackingDat, file.path(getwd(), 'covidtracking_dot_com.csv'))
#head(covidtrackingDat[, 1:7])
# csv input files
basicDatasetsDir = file.path(getwd(), 'basicDatasets')
populationData = read.csv(file.path(basicDatasetsDir, 'usItalyKorea_Population2020UN.csv'))
stpopulationData =
read.csv(file.path(basicDatasetsDir, 'USstatesPopulation_USCensusBureau_simplified.csv'))
## Global parameters
#stname = 'TX'
#totalCases_threshold_toSetStart = 100
regionOfInt = c('Korea', 'Italy', 'X')
mvWin = 3
########################
##  TX counties
########################
totalCases_threshold_toSetStart = 50
totCases_thrshld_toSelectCnt = 200
## fetch TX county data from nytimes
url_nutimesCounty =
'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'
NYTcountyDat = read.csv(url_nutimesCounty, head=T)
# counties in Texas
ind = (NYTcountyDat$state == 'Texas')
TXcountyDat = NYTcountyDat[ind, ]
# daily input dataset
write.csv(TXcountyDat, file.path(getwd(), 'TXcounty_nytimes.csv'))
tail(TXcountyDat)
# read TX county population
#numCnt = 10
popTXcounty= read.csv(file.path(basicDatasetsDir, 'worldpopulationReviewdotcom_2020_TexasCounty.csv'))
# county sorting
ind = (TXcountyDat$date == curDate)
txcntToday = TXcountyDat[ind, ]
txcntToday_morethan200 = txcntToday[txcntToday$cases > totCases_thrshld_toSelectCnt, ]
curCases = txcntToday_morethan200$cases
scases = sort(curCases, index.return = T, decreasing = T)
txcntToday_sorted = txcntToday_morethan200[scases$ix, ]
numCnt = nrow(txcntToday_sorted)
print(paste0('number of Counties: ', numCnt))
print(txcntToday_sorted)
sortedCounties = as.character(txcntToday_sorted$county)
print(sortedCounties)
# run counties
myCaptnLst_county = list()
for (i in 1:numCnt){
tmp = cvd_county_matchedProjected(curDate, sortedCounties[i], jhudat, TXcountyDat,
populationData, popTXcounty)
myCaptnLst_county[[i]] = tmp
print(tmp)
}
t2=Sys.time(); t2 - t1
## EOF
# assume input datasets are already loaded to workspace
print(getwd())
print(curDate)
sortedCounties
head(sortedCounties)
# manual curation
Ctname = sortedCounties
Ctname[which(Ctname == "Fort Bend")] <- 'Fort-Bend'
Ctname[which(Ctname == "El Paso")] <- 'El-Paso'
outPath4 = file.path(getwd(), 'output', 'TX_counties_uptodate')
if (file.exists(file.path(outPath4, 'Fort Bend_3plot_combined.png'))) {
file.copy(file.path(outPath4, 'Fort Bend_3plot_combined.png'),
file.path(outPath4, 'Fort-Bend_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath4, 'El Paso_3plot_combined.png'))) {
file.copy(file.path(outPath4, 'El Paso_3plot_combined.png'),
file.path(outPath4, 'El-Paso_3plot_combined.png'), overwrite = T)
}
repname3 = 'DAILY_REPORT_TX_COUNTY.md'
sink(file.path(getwd(), repname3))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# TX counties with cumulative confirmed cases > 200\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:length(Ctname)){
getImg = paste0('>![img](/output/TX_counties_uptodate/',
Ctname[i], '_3plot_combined.png)')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
sink()
