v
v[3]
A[2, 3]
A[1:3, 3]
A[, 3]
A[2:3, 2:3]
ind <- c(2:3)
A[ind, 2]
M
A
myList <- list(mat1 = M, mat2 = t(M), mat3 = A)
myList
myList$mat3[2,3]
myList[[3]]
myList$mat3
myList2 <- c(myList, myList)
myList
myList2
mydata <- list(tvolume = 1:10, tweight = 2:11)
mydata
mydata <- data.frame(tvolume = 1:10, tweight = 2:11)
mydata
data(A)
data(cars)
cars
View(cars)
View(cars)
cars
head(cars)
tail(cars)
plot(cars$speed, cars$dist)
plot(cars)
summary(cars$speed)
summary(cars)
hist(cars$speed)
mean(cars$speed)
sd(cars$speed)
var(cars$speed)
quantile(cars$speed)
boxplot(cars)
boxplot(cars$speed)
boxplot(cars)
rnorm(n=30, mean=0, sd=1)
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
hist(rnorm(30))
# an example of t-test
tumorSizeWT <- rnorm(n=30, mean=7, sd=1)
tumorSizeMT <- rnorm(n=40, mean=6, sd=1)
tumorSizeWT
tumorSizeMT
summary(tumorSizeMT)
summary(tumorSizeWT)
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
# data visualization using density()
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
plot(density(tumorSizeMT), col='red', xlim=c(2,11), ylim=c(0, 0.6))
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
lines(density(tumorSizeMT), col='red', xlim=c(2,11), ylim=c(0, 0.6))
# data visualization using boxplot
tumorSize <- c(tumorSizeWT, tumorSizeMT)
c(rep("WT", 30), rep("MT", 40))
tumorSize
cond
# data visualization using boxplot
tumorSize <- c(tumorSizeWT, tumorSizeMT)
cond <- c(rep("WT", 30), rep("MT", 40))
boxplot(tumorSize ~ cond)
# Student's t-test
t.test(x=tumorSizeWT, y=tumorSizeMT)
# Student's t-test
t.test(x=tumorSizeWT, y=tumorSizeMT)
# an example of t-test
tumorSizeWT <- rnorm(n=30, mean=7, sd=1)
tumorSizeMT <- rnorm(n=40, mean=6, sd=1)
# data visualization using density()
plot(density(tumorSizeWT), xlim=c(2, 11), ylim=c(0, 0.6))
lines(density(tumorSizeMT), col='red', xlim=c(2,11), ylim=c(0, 0.6))
# data visualization using boxplot
tumorSize <- c(tumorSizeWT, tumorSizeMT)
cond <- c(rep("WT", 30), rep("MT", 40))
boxplot(tumorSize ~ cond)
# Student's t-test
t.test(x=tumorSizeWT, y=tumorSizeMT)
#setwd('C:/forgithub/COVID19_LookAtUsTodaySeeYourselfTomorrow')
print(getwd())
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
#setwd('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow')
print(getwd())
load("C:/forgithub/COVID19_0428/summryMatLst_4vals_1st.rdata")
summryMatLst
tmp = array(unlist(summryMatLst), dim = c(51, 6, 4))
tmp
boxplot(tmp[, 1, ])
boxplot(tmp[, 2, ])
boxplot(tmp[, 2, 1:3])
ifrVec
boxplot(tmp[, 3, 1:3])
boxplot(tmp[, 4, 1:3])
boxplot(tmp[, 5, 1:3])
setwd('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow')
print(getwd())
## COVID-19: Look at us today, see yourself tomorrow
## Look at us today, see yourself tomorrow - NY Governor Andrew Cuomo
## Jungsik Noh, UTSW, Dallas, TX
##
# Updates:
# 04/13/2020, Noh. Add 3-plot output. Add -uptodate output folder.
# 04/12/2020, Noh. X lab changed. No. of total cases added.
# 04/11/2020, Noh. Add ref line. Add TX county analysis.
# 04/10/2020, Noh. Starting day is adjusted.
# 04/07/2020, Noh. population adjusted.
## source functions
t1 = Sys.time()
#curDate = Sys.Date(); print(curDate)
curDate = '2020-06-17'
#setwd('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow')
print(getwd())
source(file.path(getwd(), 'cvd_state_matchedProjected.R'))
source(file.path(getwd(), 'cvd_country_matchedProjected.R'))
source(file.path(getwd(), 'cvd_county_matchedProjected.R'))
library(ggplot2)
library(data.table)
library(formattable)
library(ggpubr)
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
write.csv(jhudat, file.path(getwd(), 'JHU_CSSE_covid19_confirmed_global.csv'))
## fetch states data from covidtracking.com
url2 = 'https://covidtracking.com/api/v1/states/daily.csv'
covidtrackingDat = read.csv(url2, head=T)
# daily input dataset
write.csv(covidtrackingDat, file.path(getwd(), 'covidtracking_dot_com.csv'))
head(covidtrackingDat[, 1:7])
# csv input files
basicDatasetsDir = file.path(getwd(), 'basicDatasets')
populationData = read.csv(file.path(basicDatasetsDir, 'usItalyKorea_Population2020UN.csv'))
stpopulationData =
read.csv(file.path(basicDatasetsDir, 'USstatesPopulation_USCensusBureau_simplified.csv'))
## Global parameters
#stname = 'TX'
totalCases_threshold_toSetStart = 100
regionOfInt = c('Korea', 'Italy', 'X')
mvWin = 3
######################
##  top 25 countries
######################
numCntr = 25
UNpop2019Dat = read.csv(file.path(basicDatasetsDir, 'UN_WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES_2019.csv'))
jhudatL = jhudat[, c(2, ncol(jhudat))]
head(jhudatL)
scases = sort(jhudatL[, 2], index.return = T, decreasing = T)
jhudatL2 = jhudatL[scases$ix, ]
print(jhudatL2[1:numCntr, ])
namesTop20 = as.character(jhudatL2$Country.Region[1:numCntr])
# Korea is not in top 25 (04/21 revised)
namesTop20 = c(namesTop20, 'Korea, South')
# name curation -.-;; good job jhu
namesTop20_1 = namesTop20
namesTop20_1[(namesTop20 == 'US')] = 'United States of America'
namesTop20_1[(namesTop20 == 'Korea, South')] = 'Republic of Korea'
namesTop20_1[(namesTop20 == 'Iran')] = 'Iran (Islamic Republic of)'
namesTop20_1[(namesTop20 == 'Russia')] = 'Russian Federation'
# fetch pop
countryNamePop = data.frame(Region = namesTop20, namesTop20_1, pop2019 = 1:length(namesTop20))
for (i in 1:nrow(countryNamePop)){
pop0 = UNpop2019Dat$X2019[which(UNpop2019Dat$Region == namesTop20_1[i])]
countryNamePop$pop2019[i] = pop0
}
# run countries
numState = numCntr
myCaptnLst_country = list()
for (i in 1:numState){
stname = as.character(countryNamePop$Region[i])
tmp = cvd_country_matchedProjected(curDate, stname, jhudat, countryNamePop)
myCaptnLst_country[[i]] = tmp
print(tmp)
}
############
##  States
############
# total 56 states
curPos = covidtrackingDat$positive[1:56]
scases = sort(curPos, index.return = T, decreasing = T)
sortedStates = as.character(covidtrackingDat$state[scases$ix[1:56]])
print(sortedStates)
# run states
numState = length(sortedStates)
StateAbb = sortedStates
myCaptnLst = list()
for (i in 1:numState){
tmp = cvd_state_matchedProjected(curDate, StateAbb[i], jhudat, covidtrackingDat,
populationData, stpopulationData)
myCaptnLst[[i]] = tmp
print(tmp)
}
t2=Sys.time(); t2 - t1
## EOF
url_nutimesCounty =
'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'
NYTcountyDat = read.csv(url_nutimesCounty, head=T)
# counties in Texas
ind = (NYTcountyDat$state == 'Texas')
TXcountyDat = NYTcountyDat[ind, ]
# daily input dataset
write.csv(TXcountyDat, file.path(getwd(), 'TXcounty_nytimes.csv'))
tail(TXcountyDat)
## COVID-19: Look at us today, see yourself tomorrow
## Look at us today, see yourself tomorrow - NY Governor Andrew Cuomo
## Jungsik Noh, UTSW, Dallas, TX
##
# Updates:
## source functions
t1 = Sys.time()
#curDate = Sys.Date(); print(curDate)
curDate = '2020-06-17'
#setwd('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow')
getwd()
source(file.path(getwd(), 'cvd_state_matchedProjected.R'))
source(file.path(getwd(), 'cvd_country_matchedProjected.R'))
source(file.path(getwd(), 'cvd_county_matchedProjected.R'))
library(ggplot2)
library(data.table)
library(formattable)
library(ggpubr)
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
write.csv(jhudat, file.path(getwd(), 'JHU_CSSE_covid19_confirmed_global.csv'))
### fetch states data from covidtracking.com
#url2 = 'https://covidtracking.com/api/v1/states/daily.csv'
#covidtrackingDat = read.csv(url2, head=T)
## daily input dataset
#write.csv(covidtrackingDat, file.path(getwd(), 'covidtracking_dot_com.csv'))
#head(covidtrackingDat[, 1:7])
# csv input files
basicDatasetsDir = file.path(getwd(), 'basicDatasets')
populationData = read.csv(file.path(basicDatasetsDir, 'usItalyKorea_Population2020UN.csv'))
stpopulationData =
read.csv(file.path(basicDatasetsDir, 'USstatesPopulation_USCensusBureau_simplified.csv'))
## Global parameters
#stname = 'TX'
#totalCases_threshold_toSetStart = 100
regionOfInt = c('Korea', 'Italy', 'X')
mvWin = 3
########################
##  TX counties
########################
totalCases_threshold_toSetStart = 50
totCases_thrshld_toSelectCnt = 600
## fetch TX county data from nytimes
url_nutimesCounty =
'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'
NYTcountyDat = read.csv(url_nutimesCounty, head=T)
# counties in Texas
ind = (NYTcountyDat$state == 'Texas')
TXcountyDat = NYTcountyDat[ind, ]
# daily input dataset
write.csv(TXcountyDat, file.path(getwd(), 'TXcounty_nytimes.csv'))
tail(TXcountyDat)
# read TX county population
#numCnt = 10
popTXcounty= read.csv(file.path(basicDatasetsDir, 'worldpopulationReviewdotcom_2020_TexasCounty.csv'))
# county sorting
ind = (TXcountyDat$date == curDate)
txcntToday = TXcountyDat[ind, ]
txcntToday_morethan200 = txcntToday[txcntToday$cases > totCases_thrshld_toSelectCnt, ]
curCases = txcntToday_morethan200$cases
scases = sort(curCases, index.return = T, decreasing = T)
txcntToday_sorted = txcntToday_morethan200[scases$ix, ]
numCnt = nrow(txcntToday_sorted)
print(paste0('number of Counties: ', numCnt))
print(txcntToday_sorted)
sortedCounties = as.character(txcntToday_sorted$county)
print(sortedCounties)
# run counties
myCaptnLst_county = list()
for (i in 1:numCnt){
tmp = cvd_county_matchedProjected(curDate, sortedCounties[i], jhudat, TXcountyDat,
populationData, popTXcounty)
myCaptnLst_county[[i]] = tmp
print(tmp)
}
t2=Sys.time(); t2 - t1
## EOF
## COVID-19: Look at us today, see yourself tomorrow
## Jungsik Noh, UTSW, Dallas, TX
##
# Updates:
# assume input datasets are already loaded to workspace
print(getwd())
print(curDate)
##
##  country report
##
head(countryNamePop)
# manual curation
cname = countryNamePop$Region
levels(cname)[levels(cname) == 'Korea, South'] <- 'Korea,-South'
levels(cname)[levels(cname) == 'United Kingdom'] <- 'United-Kingdom'
levels(cname)[levels(cname) == 'Saudi Arabia'] <- 'Saudi-Arabia'
cnamePop = cbind(cname, countryNamePop[,2:3])
outPath3 = file.path(getwd(), 'output', 'countries_uptodate')
if (file.exists(file.path(outPath3, 'Korea, South_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Korea, South_3plot_combined.png'),
file.path(outPath3, 'Korea,-South_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'United Kingdom_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'United Kingdom_3plot_combined.png'),
file.path(outPath3, 'United-Kingdom_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'Saudi Arabia_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Saudi Arabia_3plot_combined.png'),
file.path(outPath3, 'Saudi-Arabia_3plot_combined.png'), overwrite = T)
}
repname1 = 'DAILY_REPORT_COUNTRY.md'
sink(file.path(getwd(), repname1))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# Countries (top 25)\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:nrow(countryNamePop)){
getImg = paste0('>![img](/output/countries_uptodate/',
cname[i], '_3plot_combined.png)')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
sink()
##
##  states report
##
head(sortedStates)
repname2 = 'DAILY_REPORT_STATE.md'
sink(file.path(getwd(), repname2))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# States in the U.S.\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:length(sortedStates)){
fnametmp = paste0(sortedStates[i], '_3plot_combined.png')
if (file.exists(file.path(getwd(), 'output', 'states_uptodate', fnametmp))) {
getImg = paste0('>![img](/output/states_uptodate/', fnametmp, ')')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
}
sink()
##
##  county report
##
head(sortedCounties)
# manual curation
Ctname = sortedCounties
Ctname[which(Ctname == "Fort Bend")] <- 'Fort-Bend'
Ctname[which(Ctname == "El Paso")] <- 'El-Paso'
outPath4 = file.path(getwd(), 'output', 'TX_counties_uptodate')
if (file.exists(file.path(outPath4, 'Fort Bend_3plot_combined.png'))) {
file.copy(file.path(outPath4, 'Fort Bend_3plot_combined.png'),
file.path(outPath4, 'Fort-Bend_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath4, 'El Paso_3plot_combined.png'))) {
file.copy(file.path(outPath4, 'El Paso_3plot_combined.png'),
file.path(outPath4, 'El-Paso_3plot_combined.png'), overwrite = T)
}
repname3 = 'DAILY_REPORT_TX_COUNTY.md'
sink(file.path(getwd(), repname3))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# TX counties with cumulative confirmed cases > 600\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:length(Ctname)){
getImg = paste0('>![img](/output/TX_counties_uptodate/',
Ctname[i], '_3plot_combined.png)')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
sink()
