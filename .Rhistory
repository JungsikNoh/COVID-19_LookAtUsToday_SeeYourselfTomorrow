print(fig2out)
f2name = paste0(stname, '_growthRate.png')
png(file.path(outPath, f2name), width=8, height=4, units = "in", res=300)
Sys.sleep(2)
print(fig2out)
Sys.sleep(2)
dev.off()
Sys.sleep(4)
### Moving Avg plot. Daily Growth Rate Time Series
### 04/10 (XXXX)
datf3ma = datf3
datf3ma$growth.Korea = myFilter(datf3$growth.Korea, 9, dLast[1])
datf3ma$growth.Italy = myFilter(datf3$growth.Italy,  9, dLast[2])
datf3ma$growth.X = myFilter(datf3$growth.X,  9, dLast[3])
datf3maL = datf3ma
for (j in 1:numTS){
datf3maL[1:(dLast[j]-1), j+4] = NA
datf3maL[1:(dLast[j]-1), j+7] = NA
}
refLineVal = datf3maL$growth.X[!is.na(datf3maL$growth.X)]
## myFilter, mov avg. Daily Growth Rate Time Series
tmp1 = data.frame(Day = datf3maL$Day, Today = stname, val = datf3maL$growth.X)
tmp2 = data.frame(Day = datf3maL$Day, Today = 'Korea.Adj', val = datf3maL$growth.Korea)
tmp3 = data.frame(Day = datf3maL$Day, Today = 'Italy.Adj', val = datf3maL$growth.Italy)
ggp_datf3maL = rbind(tmp1, tmp2, tmp3)
fig21 <- ggplot() +
#geom_line(data = datf3, aes(Day, maGRX), size=1, alpha=0.8, color='gray',
#          linetype = 'solid') +
geom_line(data=datf3ma, aes(Day, growth.X), size=2, alpha=0.8, color='black') +
geom_line(data=datf3ma, aes(Day, growth.Korea), size=2, alpha=0.3, color='blue') +
geom_line(data=datf3ma, aes(Day, growth.Italy), size=2, alpha=0.3, color='red') +
geom_point(data = ggp_datf3maL, aes(x=Day, y=val, color=Today), size=4, alpha=0.8) +
scale_color_manual(values = c('black', 'blue', 'red')) +
theme_bw()  +
geom_hline(yintercept = refLineVal)
#geom_point(data=datf3L, aes(Day, growth.Korea), size=4, alpha=0.8, color='blue') +
#geom_point(data=datf3L, aes(Day, growth.Italy), size=4, alpha=0.8, color='red') +
fig21out <- fig21 +
coord_cartesian(ylim = c(0, 70)) +
labs(title = 'Trend Curve of the Daily Growth Rates',
x= paste0('Days since total cases became > ', totalCases_threshold_toSetStart),
y='Percentage',
subtitle = paste0('As of ', curDate, XtotalforMsg)) +
theme(plot.title = element_text(hjust = 0.5, size=rel(2)),
axis.text = element_text(size = rel(2) ),
axis.title = element_text(size=rel(2)),
legend.position = 'top', legend.title = element_text(size = rel(1.5)),
legend.text = element_text(size = rel(1.5)))
print(fig21out)
f21name = paste0(stname, '_growthRate_trend.png')
png(file.path(outPath, f21name), width=8, height=4, units = "in", res=300)
Sys.sleep(2)
print(fig21out)
Sys.sleep(2)
dev.off()
Sys.sleep(4)
## TS matching
dX = rev(dLast)[1]
lastGRs = datf3[(dX-2):dX, ncol(datf3)]
RMSDmat = matrix(NA, longestLen, 2)
for (i in (mvWin+1):longestLen){
a1 = A4[(i-mvWin+1):i, 1]
a1tmp = sqrt(mean((a1 - lastGRs)^2))
RMSDmat[i, 1] = a1tmp
a2 = A4[(i-mvWin+1):i, 2]
a2tmp = sqrt(mean((a2 - lastGRs)^2))
RMSDmat[i, 2] = a2tmp
}
dDelta = apply(RMSDmat, 2, which.min)
datfAdd = matrix(NA, dim(datf3)[1], 3)
colnames(datfAdd) = colnames(A4)
datf4 = rbind(datfAdd, A4, datfAdd)
##
ITtoKO = dDelta[2] - dDelta[1]
ITaligned = shift(datf4[,2], n=ITtoKO, fill=NA, type="lead")
datf5 = datf4
datf5 = add.col(datf4, ITaligned)
XtoKO = dX - dDelta[1]
Xaligned = shift(datf4[,3], n = XtoKO, fill=NA, type='lead')
datf5 = add.col(datf5, Xaligned)
# Days (Today = 0)
daysFromToday0 = 1:nrow(datf5)
daysFromToday = daysFromToday0 - dDelta[1] - nrow(A4)
datf6 = data.frame(daysFromToday = daysFromToday,
growth.Korea = datf4[,1], growth.Italy = ITaligned, growth.X = Xaligned)
idrow = (rowSums(is.na(datf6)) == 3)
datf7 = datf6[!idrow,]
# find 'today'
A5 = datf7[, 1+1:numTS]
dLastDf7 = apply(A5, 2, function(x) max(which(!is.na(x))))
datf7L = datf7
for (j in 1:numTS){
datf7L[1:(dLastDf7[j]-1), j+1] = NA
}
# projected Growth Rates
datf7Prj = datf7
datf7Prj[1:dLastDf7[3], ] = NA
print('days since >100')
print(dLast)
print('day after >100 that matches XX today')
print(dDelta)
print('days that can be projected')
daysProjected = dLast - c(dDelta, dLast[3])
print(daysProjected)
# pct
grKOtoday = round(datf7L$growth.Korea[!is.na(datf7L$growth.Korea)], 1)
grITtoday = round(datf7L$growth.Italy[!is.na(datf7L$growth.Italy)], 1)
grXtoday = round(datf7L$growth.X[!is.na(datf7L$growth.X)], 1)
## The growth rate of X total cases today is similar to that of Italy (daysProjected) days before.
## If X follows Italy, X daily growth rate would reach xx% in the xx days.
# If xx is on the track of Korea/Italy, xx is estimated to be behind xx days,
# in which daily growth rate will be xx%,
# and total confirmed cases will be xx.
#myCaptn1 =
#  cat(paste0('The growth rate of ', countryOfInt[3], ' today is close to that of Korea ',
#             daysProjected[1], ' days ago.', '\n',
#             'IF ', countryOfInt[3], ' follows Korea, ', countryOfInt[3],
#             ' daily growth rate would reach ', grKOtoday, '% in ',
#             daysProjected[1], ' days.'))
#myCaptn1 = paste0('IF ', stname, ' follows Korea, ', stname,
#             ' daily growth rate would reach ', grKOtoday, '% in ',
#             daysProjected[1], ' days.')
myCaptn1 = paste0('If ', stname, ' follows the track of Korea, ',
'its daily growth rate of ', grXtoday, '% today would become ',
grKOtoday, '% in ',
daysProjected[1], ' days.')
myCaptn2 = paste0('If ', stname, ' follows the track of Italy, ',
'its daily growth rate of ', grXtoday, '% today would become ',
grITtoday, '% in ',
daysProjected[2], ' days.')
tmp1 = data.frame(daysFromToday = datf7L$daysFromToday, Today = stname, val = datf7L$growth.X)
tmp2 = data.frame(daysFromToday = datf7L$daysFromToday, Today = 'Korea.Adj', val = datf7L$growth.Korea)
tmp3 = data.frame(daysFromToday = datf7L$daysFromToday, Today = 'Italy.Adj', val = datf7L$growth.Italy)
ggp_datf7L = rbind(tmp1, tmp2, tmp3)
fig3 <- ggplot(data=datf7) +
geom_line(data=datf7, aes(daysFromToday, growth.X), size=2, alpha=0.8, color='black') +
geom_line(data=datf7, aes(daysFromToday, growth.Korea), size=2, alpha=0.3, color='blue') +
geom_line(data=datf7, aes(daysFromToday, growth.Italy), size=2, alpha=0.3, color='red') +
geom_point(data = ggp_datf7L, aes(x=daysFromToday, y=val, color=Today), size=4, alpha=0.8) +
scale_color_manual(values = c('black', 'blue', 'red')) +
theme_bw() +
#geom_point(data=datf7L, aes(daysFromToday, growth.Korea), size=4, alpha=0.8, color='blue') +
#geom_point(data=datf7L, aes(daysFromToday, growth.Italy), size=4, alpha=0.8, color='red') +
geom_line(data = datf7Prj, aes(daysFromToday, growth.Korea),
size=2, alpha=0.8, color='blue', linetype='dashed') +
geom_line(data = datf7Prj, aes(daysFromToday, growth.Italy),
size=2, alpha=0.8, color='red', linetype='dashed') +
geom_hline(yintercept = grXtoday)
fig3out <- fig3 + coord_cartesian(ylim = c(0, 70)) +
labs(title = 'Matched/Projected Daily Growth Rate of Total Cases',
x= paste0('Days from today of ', stname), y='Percentage',
subtitle = paste0('As of ', curDate, XtotalforMsg),
caption = paste0(myCaptn1, '\n', myCaptn2)) +
theme(plot.title = element_text(hjust = 0.5, size=rel(2)),
axis.text = element_text(size = rel(2) ),
axis.title = element_text(size=rel(2)),
legend.position = 'top', legend.title = element_text(size = rel(1.5)),
legend.text = element_text(size = rel(1.5)),
plot.caption = element_text(hjust = 0, size = rel(1)))
print(fig3out)
f3name = paste0(stname, '_growthRate_matchedProjected.png')
png(file.path(outPath, f3name), width=8, height=4.5, units = "in", res=300)
Sys.sleep(2)
print(fig3out)
Sys.sleep(2)
dev.off()
Sys.sleep(4)
id1 = which(datf7$daysFromToday >= 1)
prjGRfromDatf7 = datf7[id1, ]
maxPrjPrd = dim(prjGRfromDatf7)[1]
XprjLongestLen = dLast[3] + maxPrjPrd
elongatedLen = max(0, XprjLongestLen - dim(datf3)[1])
elongBlock = matrix(NA, elongatedLen, dim(datf3)[2])
colnames(elongBlock) = colnames(datf3)
datf3_prj = rbind(datf3, elongBlock)
prjKO = c(rep(NA, dLast[3]), prjGRfromDatf7$growth.Korea)
print('days since >100')
print(dLast)
print('day after >100 that matches XX today')
print(dDelta)
print('days that can be projected')
daysProjected = dLast - c(dDelta, dLast[3])
print(daysProjected)
currTot = datf3_prj2[dLast[3], 4]
id1 = which(datf7$daysFromToday >= 1)
View(datf7)
prjGRfromDatf7 = datf7[id1, ]
maxPrjPrd = dim(prjGRfromDatf7)[1]
XprjLongestLen = dLast[3] + maxPrjPrd
elongatedLen = max(0, XprjLongestLen - dim(datf3)[1])
elongBlock = matrix(NA, elongatedLen, dim(datf3)[2])
colnames(elongBlock) = colnames(datf3)
datf3_prj = rbind(datf3, elongBlock)
View(datf3_prj)
prjKO = c(rep(NA, dLast[3]), prjGRfromDatf7$growth.Korea)
length(prjKO) = nrow(datf3_prj)
prjKO
prjIT = c(rep(NA, dLast[3]), prjGRfromDatf7$growth.Italy)
length(prjIT) = nrow(datf3_prj)
prj2 = data.frame(prj.grKO.X = prjKO, prj.grIT.X = prjIT)
datf3_prj2 = cbind(datf3_prj, prj2)
View(datf3_prj2)
currTot = datf3_prj2[dLast[3], 4]
prjTotKO = cbind(rep(NA, maxPrjPrd + 1))
prjTotKO
prjTotKO[1] = currTot
prjTotKO
maxPrjPrd
for (i in 1:maxPrjPrd){
prjTotKO[i+1] = prjTotKO[i] * (1 + prjGRfromDatf7$growth.Korea[i]/100)
}
currTot = datf3_prj2[dLast[3], 4]
prjTotKO = cbind(rep(NA, maxPrjPrd + 1))
prjTotKO[1] = currTot
prjTotIT = cbind(rep(NA, maxPrjPrd + 1))
prjTotIT[1] = currTot
for (i in 1:maxPrjPrd){
prjTotIT[i+1] = prjTotIT[i] * (1 + prjGRfromDatf7$growth.Italy[i]/100)
}
prjTotIT = cbind(rep(NA, maxPrjPrd + 1))
prjTotIT[1] = currTot
prjKO2 = c(rep(NA, dLast[3] - 1), prjTotKO)
prjIT2 = c(rep(NA, dLast[3] - 1), prjTotIT)
length(prjKO2) = nrow(datf3_prj)
length(prjIT2) = nrow(datf3_prj)
datf3_prj2$grKO.prj.tot.X = prjKO2
datf3_prj2$grIT.prj.tot.X = prjIT2
# Daily new confirmed cases
# KO, IT
B1 = datf3_prj2[, 13:14]
B2 = rbind(rep(NA, 2), B1[1:(nrow(B1) - 1),])
B3 = B1 - B2
B4 = (B3 / B2) * 100
colnames(B3) = paste0('dif.', colnames(B1))
colnames(B4) = paste0('growth.', colnames(B1))
datf3_prj3 = cbind(datf3_prj2, B3, B4)
lenHeadToadd = max(ITtoKO, XtoKO, 0)
headNA = matrix(NA, lenHeadToadd, dim(datf3_prj3)[2])
colnames(headNA) = colnames(datf3_prj3)
datf3_prj3_algn0 = rbind(headNA, datf3_prj3)
datf3_prj3_algn1 = datf3_prj3_algn0
datf3_prj3_algn1[, 3] = shift(datf3_prj3_algn0[, 3], n=ITtoKO, fill=NA, type="lead")
datf3_prj3_algn1[, 4] = shift(datf3_prj3_algn0[, 4], n=XtoKO, fill=NA, type="lead")
datf3_prj3_algn1[, 6] = shift(datf3_prj3_algn0[, 6], n=ITtoKO, fill=NA, type="lead")
datf3_prj3_algn1[, 7] = shift(datf3_prj3_algn0[, 7], n=XtoKO, fill=NA, type="lead")
datf3_prj3_algn1[, 9] = shift(datf3_prj3_algn0[, 9], n=ITtoKO, fill=NA, type="lead")
datf3_prj3_algn1[, 10] = shift(datf3_prj3_algn0[, 10], n=XtoKO, fill=NA, type="lead")
for (j in 11:18){
datf3_prj3_algn1[, j] = shift(datf3_prj3_algn0[, j], n=XtoKO, fill=NA, type="lead")
}
idna = (rowSums(is.na(datf3_prj3_algn1)) == ncol(datf3_prj3_algn1))
datf3_prj3_algn2 = datf3_prj3_algn1[!idna, ]
dayfrtoday_algn2 = apply(datf3_prj3_algn2[, 2:4], 2, function(x) max(which(!is.na(x))))
daysFromToday_0 = 1:nrow(datf3_prj3_algn2)
daysFromToday_2 = daysFromToday_0 - dayfrtoday_algn2[3]
datf3_prj3_algn3 = data.frame(daysFromToday = daysFromToday_2, datf3_prj3_algn2)
prjStart = datf3_prj3_algn3$dif.X[dayfrtoday_algn2[3]]
datf3_prj3_algn3$dif.grKO.prj.tot.X[dayfrtoday_algn2[3]] = prjStart
datf3_prj3_algn3$dif.grIT.prj.tot.X[dayfrtoday_algn2[3]] = prjStart
datf3_prj3_algn3L = datf3_prj3_algn3
for (j in 1:numTS){
datf3_prj3_algn3L[1:(dayfrtoday_algn2[j]-1), j+5] = NA
}
# plot
difprjKO0 = datf3_prj3_algn3$dif.grKO.prj.tot.X
idKO = max(which(!is.na(difprjKO0)))
difprjKO = round(difprjKO0[idKO])
difprjIT0 = datf3_prj3_algn3$dif.grIT.prj.tot.X
idIT = max(which(!is.na(difprjIT0)))
difprjIT = round(difprjIT0[idIT])
#  prjStart = difX
difX0 = datf3_prj3_algn3$dif.X
idX = max(which(!is.na(difX0)))
difX = round(difX0[idX])
myCaptn3 = paste0('If ', stname, ' follows the track of Korea, ',
'its new cases of ', difX, ' today would become ',
difprjKO, ' in ',
daysProjected[1], ' days.')
myCaptn4 = paste0('If ', stname, ' follows the track of Italy, ',
'its new cases of ', difX, ' today would become ',
difprjIT, ' in ',
daysProjected[2], ' days.')
tmp1 = data.frame(daysFromToday = datf3_prj3_algn3L$daysFromToday, Today = stname, val = datf3_prj3_algn3L$dif.X)
tmp2 = data.frame(daysFromToday = datf3_prj3_algn3L$daysFromToday, Today = 'Korea.Adj', val = datf3_prj3_algn3L$dif.Korea)
tmp3 = data.frame(daysFromToday = datf3_prj3_algn3L$daysFromToday, Today = 'Italy.Adj', val = datf3_prj3_algn3L$dif.Italy)
ggp_datf3_prj3_algn3L = rbind(tmp1, tmp2, tmp3)
fig4 <- ggplot() +
geom_line(data=datf3_prj3_algn3, aes(daysFromToday, dif.X), size=2, alpha=0.8, color='black') +
geom_line(data=datf3_prj3_algn3, aes(daysFromToday, dif.Korea), size=2, alpha=0.3, color='blue') +
geom_line(data=datf3_prj3_algn3, aes(daysFromToday, dif.Italy), size=2, alpha=0.3, color='red') +
geom_point(data = ggp_datf3_prj3_algn3L, aes(x=daysFromToday, y=val, color=Today), size=4, alpha=1) +
scale_color_manual(values = c('black', 'blue', 'red')) +
theme_bw() +
theme_bw() +
geom_line(data = datf3_prj3_algn3, aes(daysFromToday, dif.grKO.prj.tot.X),
size=2, alpha=0.8, color='blue', linetype='F1') +
geom_line(data = datf3_prj3_algn3, aes(daysFromToday, dif.grIT.prj.tot.X),
size=2, alpha=0.8, color='red', linetype='F1')
fig4out <- fig4 +
labs(title = 'Matched/Projected New Cases Per-day',
x= paste0('Days from today of ', stname), y='',
subtitle = paste0('As of ', curDate, XtotalforMsg),
caption = paste0(myCaptn3, '\n', myCaptn4)) +
theme(plot.title = element_text(hjust = 0.5, size=rel(2)),
axis.text = element_text(size = rel(2) ),
axis.title = element_text(size=rel(2)),
legend.position = 'top', legend.title = element_text(size = rel(1.5)),
legend.text = element_text(size = rel(1.5)),
plot.caption = element_text(hjust = 0, size = rel(1)))
print(fig4out)
source('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow/cvd_state_matchedProjected.R', echo=TRUE)
i
sortedStates
i=19
StateAbb[i]
tmp = cvd_state_matchedProjected(curDate, StateAbb[i], jhudat, covidtrackingDat,
populationData, stpopulationData)
i
for (i in 20:numState){
tmp = cvd_state_matchedProjected(curDate, StateAbb[i], jhudat, covidtrackingDat,
populationData, stpopulationData)
myCaptnLst[[i]] = tmp
print(tmp)
}
t2=Sys.time(); t2 - t1
# assume input datasets are already loaded to workspace
print(getwd())
print(curDate)
##
##  country report
##
head(countryNamePop)
# manual curation
cname = countryNamePop$Region
levels(cname)[levels(cname) == 'Korea, South'] <- 'Korea,-South'
levels(cname)[levels(cname) == 'United Kingdom'] <- 'United-Kingdom'
levels(cname)[levels(cname) == 'Saudi Arabia'] <- 'Saudi-Arabia'
cnamePop = cbind(cname, countryNamePop[,2:3])
outPath3 = file.path(getwd(), 'output', 'countries_uptodate')
if (file.exists(file.path(outPath3, 'Korea, South_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Korea, South_3plot_combined.png'),
file.path(outPath3, 'Korea,-South_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'United Kingdom_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'United Kingdom_3plot_combined.png'),
file.path(outPath3, 'United-Kingdom_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'Saudi Arabia_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Saudi Arabia_3plot_combined.png'),
file.path(outPath3, 'Saudi-Arabia_3plot_combined.png'), overwrite = T)
}
repname1 = 'DAILY_REPORT_COUNTRY.md'
sink(file.path(getwd(), repname1))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# Countries (top 25)\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:nrow(countryNamePop)){
getImg = paste0('>![img](/output/countries_uptodate/',
cname[i], '_3plot_combined.png)')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
sink()
##
##  states report
##
head(sortedStates)
repname2 = 'DAILY_REPORT_STATE.md'
sink(file.path(getwd(), repname2))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# States in the U.S.\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:length(sortedStates)){
fnametmp = paste0(sortedStates[i], '_3plot_combined.png')
if (file.exists(file.path(getwd(), 'output', 'states_uptodate', fnametmp))) {
getImg = paste0('>![img](/output/states_uptodate/', fnametmp, ')')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
}
sink()
## COVID-19: Look at us today, see yourself tomorrow
## Look at us today, see yourself tomorrow - NY Governor Andrew Cuomo
## Jungsik Noh, UTSW, Dallas, TX
##
# Updates:
## source functions
t1 = Sys.time()
#curDate = Sys.Date(); print(curDate)
curDate = '2020-05-19'
#setwd('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow')
getwd()
source(file.path(getwd(), 'cvd_state_matchedProjected.R'))
source(file.path(getwd(), 'cvd_country_matchedProjected.R'))
source(file.path(getwd(), 'cvd_county_matchedProjected.R'))
library(ggplot2)
library(data.table)
library(formattable)
library(ggpubr)
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
write.csv(jhudat, file.path(getwd(), 'JHU_CSSE_covid19_confirmed_global.csv'))
### fetch states data from covidtracking.com
#url2 = 'https://covidtracking.com/api/v1/states/daily.csv'
#covidtrackingDat = read.csv(url2, head=T)
## daily input dataset
#write.csv(covidtrackingDat, file.path(getwd(), 'covidtracking_dot_com.csv'))
#head(covidtrackingDat[, 1:7])
# csv input files
basicDatasetsDir = file.path(getwd(), 'basicDatasets')
populationData = read.csv(file.path(basicDatasetsDir, 'usItalyKorea_Population2020UN.csv'))
stpopulationData =
read.csv(file.path(basicDatasetsDir, 'USstatesPopulation_USCensusBureau_simplified.csv'))
## Global parameters
#stname = 'TX'
#totalCases_threshold_toSetStart = 100
regionOfInt = c('Korea', 'Italy', 'X')
mvWin = 3
########################
##  TX counties
########################
totalCases_threshold_toSetStart = 50
totCases_thrshld_toSelectCnt = 600
## fetch TX county data from nytimes
url_nutimesCounty =
'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'
NYTcountyDat = read.csv(url_nutimesCounty, head=T)
# counties in Texas
ind = (NYTcountyDat$state == 'Texas')
TXcountyDat = NYTcountyDat[ind, ]
# daily input dataset
write.csv(TXcountyDat, file.path(getwd(), 'TXcounty_nytimes.csv'))
tail(TXcountyDat)
# read TX county population
#numCnt = 10
popTXcounty= read.csv(file.path(basicDatasetsDir, 'worldpopulationReviewdotcom_2020_TexasCounty.csv'))
# county sorting
ind = (TXcountyDat$date == curDate)
txcntToday = TXcountyDat[ind, ]
txcntToday_morethan200 = txcntToday[txcntToday$cases > totCases_thrshld_toSelectCnt, ]
curCases = txcntToday_morethan200$cases
scases = sort(curCases, index.return = T, decreasing = T)
txcntToday_sorted = txcntToday_morethan200[scases$ix, ]
numCnt = nrow(txcntToday_sorted)
print(paste0('number of Counties: ', numCnt))
print(txcntToday_sorted)
sortedCounties = as.character(txcntToday_sorted$county)
print(sortedCounties)
# run counties
myCaptnLst_county = list()
for (i in 1:numCnt){
tmp = cvd_county_matchedProjected(curDate, sortedCounties[i], jhudat, TXcountyDat,
populationData, popTXcounty)
myCaptnLst_county[[i]] = tmp
print(tmp)
}
t2=Sys.time(); t2 - t1
## EOF
##
##  county report
##
head(sortedCounties)
# manual curation
Ctname = sortedCounties
Ctname[which(Ctname == "Fort Bend")] <- 'Fort-Bend'
Ctname[which(Ctname == "El Paso")] <- 'El-Paso'
outPath4 = file.path(getwd(), 'output', 'TX_counties_uptodate')
if (file.exists(file.path(outPath4, 'Fort Bend_3plot_combined.png'))) {
file.copy(file.path(outPath4, 'Fort Bend_3plot_combined.png'),
file.path(outPath4, 'Fort-Bend_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath4, 'El Paso_3plot_combined.png'))) {
file.copy(file.path(outPath4, 'El Paso_3plot_combined.png'),
file.path(outPath4, 'El-Paso_3plot_combined.png'), overwrite = T)
}
repname3 = 'DAILY_REPORT_TX_COUNTY.md'
sink(file.path(getwd(), repname3))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# TX counties with cumulative confirmed cases > 600\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:length(Ctname)){
getImg = paste0('>![img](/output/TX_counties_uptodate/',
Ctname[i], '_3plot_combined.png)')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
sink()
