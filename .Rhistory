totalCases_threshold_toSetStart = 100
regionOfInt = c('Korea', 'Italy', 'X')
mvWin = 3
######################
##  top 25 countries
######################
numCntr = 25
UNpop2019Dat = read.csv(file.path(basicDatasetsDir, 'UN_WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES_2019.csv'))
jhudatL = jhudat[, c(2, ncol(jhudat))]
head(jhudatL)
scases = sort(jhudatL[, 2], index.return = T, decreasing = T)
jhudatL2 = jhudatL[scases$ix, ]
print(jhudatL2[1:numCntr, ])
namesTop20 = as.character(jhudatL2$Country.Region[1:numCntr])
# name curation -.-;; good job jhu
namesTop20_1 = namesTop20
namesTop20_1[(namesTop20 == 'US')] = 'United States of America'
namesTop20_1[(namesTop20 == 'Korea, South')] = 'Republic of Korea'
namesTop20_1[(namesTop20 == 'Iran')] = 'Iran (Islamic Republic of)'
namesTop20_1[(namesTop20 == 'Russia')] = 'Russian Federation'
# fetch pop
countryNamePop = data.frame(Region = namesTop20, namesTop20_1, pop2019 = 1:numCntr)
for (i in 1:numCntr){
pop0 = UNpop2019Dat$X2019[which(UNpop2019Dat$Region == namesTop20_1[i])]
countryNamePop$pop2019[i] = pop0
}
# run countries
numState = nrow(countryNamePop)
myCaptnLst_country = list()
for (i in 1:numState){
stname = as.character(countryNamePop$Region[i])
tmp = cvd_country_matchedProjected(curDate, stname, jhudat, countryNamePop)
myCaptnLst_country[[i]] = tmp
print(tmp)
}
############
##  States
############
# total 56 states
curPos = covidtrackingDat$positive[1:56]
scases = sort(curPos, index.return = T, decreasing = T)
sortedStates = as.character(covidtrackingDat$state[scases$ix[1:56]])
print(sortedStates)
# run states
numState = length(sortedStates)
StateAbb = sortedStates
myCaptnLst = list()
for (i in 1:numState){
tmp = cvd_state_matchedProjected(curDate, StateAbb[i], jhudat, covidtrackingDat,
populationData, stpopulationData)
myCaptnLst[[i]] = tmp
print(tmp)
}
t2=Sys.time(); t2 - t1
## EOF
## source functions
t1 = Sys.time()
curDate = Sys.Date(); print(curDate)
#setwd('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow')
print(getwd())
source(file.path(getwd(), 'cvd_state_matchedProjected.R'))
source(file.path(getwd(), 'cvd_country_matchedProjected.R'))
source(file.path(getwd(), 'cvd_county_matchedProjected.R'))
library(ggplot2)
library(data.table)
library(formattable)
library(ggpubr)
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
write.csv(jhudat, file.path(getwd(), 'JHU_CSSE_covid19_confirmed_global.csv'))
## fetch states data from covidtracking.com
url2 = 'https://covidtracking.com/api/v1/states/daily.csv'
covidtrackingDat = read.csv(url2, head=T)
# daily input dataset
write.csv(covidtrackingDat, file.path(getwd(), 'covidtracking_dot_com.csv'))
head(covidtrackingDat[, 1:7])
# csv input files
basicDatasetsDir = file.path(getwd(), 'basicDatasets')
populationData = read.csv(file.path(basicDatasetsDir, 'usItalyKorea_Population2020UN.csv'))
stpopulationData =
read.csv(file.path(basicDatasetsDir, 'USstatesPopulation_USCensusBureau_simplified.csv'))
#stname = 'TX'
totalCases_threshold_toSetStart = 100
regionOfInt = c('Korea', 'Italy', 'X')
mvWin = 3
numCntr = 25
UNpop2019Dat = read.csv(file.path(basicDatasetsDir, 'UN_WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES_2019.csv'))
jhudatL = jhudat[, c(2, ncol(jhudat))]
head(jhudatL)
scases = sort(jhudatL[, 2], index.return = T, decreasing = T)
jhudatL2 = jhudatL[scases$ix, ]
print(jhudatL2[1:numCntr, ])
namesTop20 = as.character(jhudatL2$Country.Region[1:numCntr])
# name curation -.-;; good job jhu
namesTop20_1 = namesTop20
namesTop20_1[(namesTop20 == 'US')] = 'United States of America'
namesTop20_1[(namesTop20 == 'Korea, South')] = 'Republic of Korea'
namesTop20_1[(namesTop20 == 'Iran')] = 'Iran (Islamic Republic of)'
namesTop20_1[(namesTop20 == 'Russia')] = 'Russian Federation'
# fetch pop
countryNamePop = data.frame(Region = namesTop20, namesTop20_1, pop2019 = 1:numCntr)
for (i in 1:numCntr){
pop0 = UNpop2019Dat$X2019[which(UNpop2019Dat$Region == namesTop20_1[i])]
countryNamePop$pop2019[i] = pop0
}
# run countries
numState = nrow(countryNamePop)
myCaptnLst_country = list()
for (i in 1:numState){
stname = as.character(countryNamePop$Region[i])
tmp = cvd_country_matchedProjected(curDate, stname, jhudat, countryNamePop)
myCaptnLst_country[[i]] = tmp
print(tmp)
}
stname
add.col<-function(df, new.col) {
df = cbind(df)
n.row<-dim(df)[1]
length(new.col)<-n.row
#tmp <- cbind(rep(NA, n.row))
#tmp[(n.row - length(new.col) + 1):n.row] <- new.col
cbind(df, new.col)
}
myFilter <- function(x, mwSize, lastDay){
y = x
halfSize = (mwSize - 1) / 2
for (i in 2:lastDay){
sti = max(2, i - halfSize)
endi = min(lastDay, i + halfSize)
slc = x[sti:endi]
y[i] = mean(slc, na.rm = T)
}
return(y)
}
outPath = file.path(getwd(), 'output', 'countries', stname, curDate)
if (!dir.exists(outPath)) dir.create(outPath, recursive = T)
#
head(jhudat)
class(jhudat)
names(jhudat)
countryName = jhudat$Country.Region
head(countryName)
ind = which(countryName == 'Korea, South')
tmp = jhudat[ind,]
head(t(tmp))
tmp2 = t(tmp[5:length(tmp)])
#plot(tmp2)
#describe(jhudat)
KOts0 = tmp2
tmp = jhudat[which(countryName == 'Italy'),]
head(t(tmp))
tmp2 = t(tmp[5:length(tmp)])
#plot(tmp2)
ITts0 = tmp2
# stname =  country name
tmp = jhudat[which((countryName == stname) & (jhudat$Province.State == '')), ]
head(t(tmp))
tmp2 = t(tmp[5:length(tmp)])
plot(tmp2)
Xts0 = tmp2
# start with 'datf'
datf = cbind(KOts0, ITts0, Xts0)
## manual curation, two zeros in Italy and Korea from Wikipedia
datfrow = rownames(datf)
id = which(datfrow == 'X3.12.20')     # Italy
datf[id, 2] = 15113
id = which(datfrow == 'X3.22.20')     # Korea
datf[id, 1] = 8897
## export corrected 3 countries data
datf = as.data.frame(datf)
colnames(datf) = c('Korea', 'Italy', 'X')
totalCases_3countries = datf
## population size adjustment
#populationData = read.csv('usItalyKorea_Population2020UN.csv')
KOpop = countryNamePop$pop2019[(countryNamePop$Region == 'Korea, South')]
ITpop = countryNamePop$pop2019[(countryNamePop$Region == 'Italy')]
##stpopulationData = read.csv('USstatesPopulation_USCensusBureau_simplified.csv')
#stInd2 = which(stpopulationData$States == stfullname2)
#Xpop = stpopulationData$Est2019_Population[stInd2]
#
Xpop = countryNamePop$pop2019[(countryNamePop$Region == stname)]
## pop adjustment: datf -> datf_adj
datf_adj = datf
datf_adj$Korea = round(datf$Korea * (Xpop/KOpop))
datf_adj$Italy = round(datf$Italy * (Xpop/ITpop))
d0 = apply(datf, 2, function(x) min(which(x > totalCases_threshold_toSetStart)))
Xpop
KOpop
KOpop
ITpop
countryNamePop
UNpop2019Dat
countryNamePop
namesTop20_1
namesTop20
# Korea is not in top 25 (04/21 revised)
namesTop20 = c(namesTop20, 'Korea, South')
namesTop20
# name curation -.-;; good job jhu
namesTop20_1 = namesTop20
namesTop20_1[(namesTop20 == 'US')] = 'United States of America'
namesTop20_1[(namesTop20 == 'Korea, South')] = 'Republic of Korea'
namesTop20_1[(namesTop20 == 'Iran')] = 'Iran (Islamic Republic of)'
namesTop20_1[(namesTop20 == 'Russia')] = 'Russian Federation'
namesTop20_1
# fetch pop
countryNamePop = data.frame(Region = namesTop20, namesTop20_1, pop2019 = 1:length(namesTop20))
nrow(countryNamePop)
# fetch pop
countryNamePop = data.frame(Region = namesTop20, namesTop20_1, pop2019 = 1:length(namesTop20))
for (i in 1:nrow(countryNamePop)){
pop0 = UNpop2019Dat$X2019[which(UNpop2019Dat$Region == namesTop20_1[i])]
countryNamePop$pop2019[i] = pop0
}
countryNamePop
# run countries
numState = numCntr
## COVID-19: Look at us today, see yourself tomorrow
## Look at us today, see yourself tomorrow - NY Governor Andrew Cuomo
## Jungsik Noh, UTSW, Dallas, TX
##
# Updates:
# 04/13/2020, Noh. Add 3-plot output. Add -uptodate output folder.
# 04/12/2020, Noh. X lab changed. No. of total cases added.
# 04/11/2020, Noh. Add ref line. Add TX county analysis.
# 04/10/2020, Noh. Starting day is adjusted.
# 04/07/2020, Noh. population adjusted.
## source functions
t1 = Sys.time()
curDate = Sys.Date(); print(curDate)
#curDate = '2020-04-16'
#setwd('C:/githubClone/COVID-19_LookAtUsToday_SeeYourselfTomorrow')
print(getwd())
source(file.path(getwd(), 'cvd_state_matchedProjected.R'))
source(file.path(getwd(), 'cvd_country_matchedProjected.R'))
source(file.path(getwd(), 'cvd_county_matchedProjected.R'))
library(ggplot2)
library(data.table)
library(formattable)
library(ggpubr)
# fetch JHU
urlJhu = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
jhudat = read.csv(urlJhu, head=T)
# china curation
idPrv = which(jhudat$Country.Region=='China')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='China', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
# canada curation
idPrv = which(jhudat$Country.Region=='Canada')
chinaPrv = jhudat[idPrv, ]
chinaPrvTS = chinaPrv[, 5:ncol(jhudat)]
chinaTS = colSums(chinaPrvTS)
chinaHead = data.frame(Province.State='', 'Country.Region'='Canada', Lat=NA, Long=NA)
chinaDP = cbind(chinaHead, rbind(chinaTS))
jhudat = rbind(chinaDP, jhudat[-idPrv, ])
head(jhudat)
write.csv(jhudat, file.path(getwd(), 'JHU_CSSE_covid19_confirmed_global.csv'))
## fetch states data from covidtracking.com
url2 = 'https://covidtracking.com/api/v1/states/daily.csv'
covidtrackingDat = read.csv(url2, head=T)
# daily input dataset
write.csv(covidtrackingDat, file.path(getwd(), 'covidtracking_dot_com.csv'))
head(covidtrackingDat[, 1:7])
# csv input files
basicDatasetsDir = file.path(getwd(), 'basicDatasets')
populationData = read.csv(file.path(basicDatasetsDir, 'usItalyKorea_Population2020UN.csv'))
stpopulationData =
read.csv(file.path(basicDatasetsDir, 'USstatesPopulation_USCensusBureau_simplified.csv'))
## Global parameters
#stname = 'TX'
totalCases_threshold_toSetStart = 100
regionOfInt = c('Korea', 'Italy', 'X')
mvWin = 3
######################
##  top 25 countries
######################
numCntr = 25
UNpop2019Dat = read.csv(file.path(basicDatasetsDir, 'UN_WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES_2019.csv'))
jhudatL = jhudat[, c(2, ncol(jhudat))]
head(jhudatL)
scases = sort(jhudatL[, 2], index.return = T, decreasing = T)
jhudatL2 = jhudatL[scases$ix, ]
print(jhudatL2[1:numCntr, ])
namesTop20 = as.character(jhudatL2$Country.Region[1:numCntr])
# Korea is not in top 25 (04/21 revised)
namesTop20 = c(namesTop20, 'Korea, South')
# name curation -.-;; good job jhu
namesTop20_1 = namesTop20
namesTop20_1[(namesTop20 == 'US')] = 'United States of America'
namesTop20_1[(namesTop20 == 'Korea, South')] = 'Republic of Korea'
namesTop20_1[(namesTop20 == 'Iran')] = 'Iran (Islamic Republic of)'
namesTop20_1[(namesTop20 == 'Russia')] = 'Russian Federation'
# fetch pop
countryNamePop = data.frame(Region = namesTop20, namesTop20_1, pop2019 = 1:length(namesTop20))
for (i in 1:nrow(countryNamePop)){
pop0 = UNpop2019Dat$X2019[which(UNpop2019Dat$Region == namesTop20_1[i])]
countryNamePop$pop2019[i] = pop0
}
# run countries
numState = numCntr
myCaptnLst_country = list()
for (i in 1:numState){
stname = as.character(countryNamePop$Region[i])
tmp = cvd_country_matchedProjected(curDate, stname, jhudat, countryNamePop)
myCaptnLst_country[[i]] = tmp
print(tmp)
}
############
##  States
############
# total 56 states
curPos = covidtrackingDat$positive[1:56]
scases = sort(curPos, index.return = T, decreasing = T)
sortedStates = as.character(covidtrackingDat$state[scases$ix[1:56]])
print(sortedStates)
# run states
numState = length(sortedStates)
StateAbb = sortedStates
myCaptnLst = list()
for (i in 1:numState){
tmp = cvd_state_matchedProjected(curDate, StateAbb[i], jhudat, covidtrackingDat,
populationData, stpopulationData)
myCaptnLst[[i]] = tmp
print(tmp)
}
t2=Sys.time(); t2 - t1
## EOF
# assume input datasets are already loaded to workspace
print(getwd())
print(curDate)
##
##  country report
##
head(countryNamePop)
# manual curation
cname = countryNamePop$Region
levels(cname)[levels(cname) == 'Korea, South'] <- 'Korea,-South'
levels(cname)[levels(cname) == 'United Kingdom'] <- 'United-Kingdom'
cnamePop = cbind(cname, countryNamePop[,2:3])
outPath3 = file.path(getwd(), 'output', 'countries_uptodate')
if (file.exists(file.path(outPath3, 'Korea, South_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Korea, South_3plot_combined.png'),
file.path(outPath3, 'Korea,-South_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'United Kingdom_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'United Kingdom_3plot_combined.png'),
file.path(outPath3, 'United-Kingdom_3plot_combined.png'), overwrite = T)
}
repname1 = 'DAILY_REPORT_COUNTRY.md'
sink(file.path(getwd(), repname1))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# Countries (top 25)\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:nrow(countryNamePop)){
getImg = paste0('>![img](/output/countries_uptodate/',
cname[i], '_3plot_combined.png)')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
sink()
##
##  states report
##
head(sortedStates)
repname2 = 'DAILY_REPORT_STATE.md'
sink(file.path(getwd(), repname2))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# States in the U.S.\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:length(sortedStates)){
fnametmp = paste0(sortedStates[i], '_3plot_combined.png')
if (file.exists(file.path(getwd(), 'output', 'states_uptodate', fnametmp))) {
getImg = paste0('>![img](/output/states_uptodate/', fnametmp, ')')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
}
sink()
cname
head(countryNamePop)
# manual curation
cname = countryNamePop$Region
levels(cname)[levels(cname) == 'Korea, South'] <- 'Korea,-South'
levels(cname)[levels(cname) == 'United Kingdom'] <- 'United-Kingdom'
levels(cname)[levels(cname) == 'Saudi Arabia'] <- 'Saudi-Arabia'
cnamePop = cbind(cname, countryNamePop[,2:3])
outPath3 = file.path(getwd(), 'output', 'countries_uptodate')
if (file.exists(file.path(outPath3, 'Korea, South_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Korea, South_3plot_combined.png'),
file.path(outPath3, 'Korea,-South_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'United Kingdom_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'United Kingdom_3plot_combined.png'),
file.path(outPath3, 'United-Kingdom_3plot_combined.png'), overwrite = T)
}
repname1 = 'DAILY_REPORT_COUNTRY.md'
sink(file.path(getwd(), repname1))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# Countries (top 25)\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:nrow(countryNamePop)){
getImg = paste0('>![img](/output/countries_uptodate/',
cname[i], '_3plot_combined.png)')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
sink()
head(countryNamePop)
# manual curation
cname = countryNamePop$Region
levels(cname)[levels(cname) == 'Korea, South'] <- 'Korea,-South'
levels(cname)[levels(cname) == 'United Kingdom'] <- 'United-Kingdom'
levels(cname)[levels(cname) == 'Saudi Arabia'] <- 'Saudi-Arabia'
cnamePop = cbind(cname, countryNamePop[,2:3])
outPath3 = file.path(getwd(), 'output', 'countries_uptodate')
if (file.exists(file.path(outPath3, 'Korea, South_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Korea, South_3plot_combined.png'),
file.path(outPath3, 'Korea,-South_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'United Kingdom_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'United Kingdom_3plot_combined.png'),
file.path(outPath3, 'United-Kingdom_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'Saudi Arabia_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Saudi Arabia_3plot_combined.png'),
file.path(outPath3, 'Saudi-Arabia_3plot_combined.png'), overwrite = T)
}
repname1 = 'DAILY_REPORT_COUNTRY.md'
sink(file.path(getwd(), repname1))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# Countries (top 25)\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:nrow(countryNamePop)){
getImg = paste0('>![img](/output/countries_uptodate/',
cname[i], '_3plot_combined.png)')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
sink()
outPath3
(file.exists(file.path(outPath3, 'Saudi Arabia_3plot_combined.png')))
countryNamePop
i=23
stname = as.character(countryNamePop$Region[i])
tmp = cvd_country_matchedProjected(curDate, stname, jhudat, countryNamePop)
# assume input datasets are already loaded to workspace
print(getwd())
print(curDate)
cname = countryNamePop$Region
levels(cname)[levels(cname) == 'Korea, South'] <- 'Korea,-South'
levels(cname)[levels(cname) == 'United Kingdom'] <- 'United-Kingdom'
levels(cname)[levels(cname) == 'Saudi Arabia'] <- 'Saudi-Arabia'
cnamePop = cbind(cname, countryNamePop[,2:3])
outPath3 = file.path(getwd(), 'output', 'countries_uptodate')
if (file.exists(file.path(outPath3, 'Korea, South_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Korea, South_3plot_combined.png'),
file.path(outPath3, 'Korea,-South_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'United Kingdom_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'United Kingdom_3plot_combined.png'),
file.path(outPath3, 'United-Kingdom_3plot_combined.png'), overwrite = T)
}
if (file.exists(file.path(outPath3, 'Saudi Arabia_3plot_combined.png'))) {
file.copy(file.path(outPath3, 'Saudi Arabia_3plot_combined.png'),
file.path(outPath3, 'Saudi-Arabia_3plot_combined.png'), overwrite = T)
}
repname1 = 'DAILY_REPORT_COUNTRY.md'
sink(file.path(getwd(), repname1))
cat('<img align="right"  height="100" src="/doc/utsw-master-logo-cmyk+BI.png">')
cat('\n\n', '<p>&nbsp;</p>', '\n\n', '<p>&nbsp;</p>', '\n\n')
cat(paste0('## ', curDate, ', COVID-19 Time Series', '\n'))
cat('# Countries (top 25)\n')
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
for (i in 1:nrow(countryNamePop)){
getImg = paste0('>![img](/output/countries_uptodate/',
cname[i], '_3plot_combined.png)')
cat(getImg)
cat('\n\n', '<p>&nbsp;</p>', '\n\n')
}
sink()
